/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas.Profesional;

import Model.GestorConsultas;
import Model.Persona.Documento;
import Model.Persona.Domicilio;
import Model.Persona.GestorCelular;
import Model.Persona.GestorDocumento;
import Model.Persona.GestorDomicilio;
import Model.Persona.GestorTelefono;
import Model.Persona.Telefono;
import Model.Persona.TipoDocumento;
import Model.Profesional.GestorProfesion;
import Model.Profesional.GestorProfesionales;
import Model.Profesional.Profesional;
import Model.Ubicacion.GestorPais;
import Model.Ubicacion.Localidad;
import Model.Ubicacion.Pais;
import Model.Ubicacion.Provincia;
import Utilidades.GestorCombo;
import Utilidades.GestorLista;
import Utilidades.Util;
import Vistas.GestorVista;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JComboBox;
import javax.swing.JDesktopPane;
import javax.swing.JOptionPane;

/**
 *
 * @author Federico
 */
public class GestorVistaProfesional extends GestorVista {
    
    private GestorProfesionales gestor;
    private List listaTelefonos;
    private List listaCel;
 
            
    public GestorVistaProfesional(JDesktopPane escritorio){
        this.setEscritorio(escritorio);
        this.setFrame(new FrmProfesional(this) );
        this.listaTelefonos = new ArrayList();
    }
        public void abrir() {
        this.getEscritorio().add(this.getFrame());
        this.getFrame().setVisible(true);
    }
      private List buscarProfesiones(){
          GestorProfesion gesprof = new GestorProfesion();
          return gesprof.listarProfesion();
      }
     public void cargarComboProfesiones(){
         GestorCombo gestorCombo = new GestorCombo();
         gestorCombo.cargarCombo(buscarProfesiones(), this.getFormularioEspecifico().getCmb_profesionDatos());
         
     }  
     public void cargarComboProfesionesBusq(){
         GestorCombo gestorCombo = new GestorCombo();
         gestorCombo.cargarCombo(buscarProfesiones(), this.getFormularioEspecifico().getCmb_profesionBusq());
         
     } 
     public void cargarComboPaises(){
         GestorCombo gestorCombo = new GestorCombo();
         gestorCombo.cargarCombo(listPaises(), this.getFormularioEspecifico().getCmbPaises());
         
     }
 
    public List listPaises() {
        GestorPais gestorPais = new GestorPais();
        return gestorPais.listarPais();
    }
      private void crearGestor() {
        this.setGestor(new GestorProfesionales());
    }
    public void setModel(Profesional model) {
        this.gestor.setModel(model);
    }

    public Profesional getModel() {
        return gestor.getModel();
    }
          public void crearModelo() {
        this.setModel(new Profesional());
    }

    public GestorProfesionales getGestor() {
        return gestor;
    }
        public void clearList() {
        GestorLista gestorLista = new GestorLista();
        gestorLista.clearList(this.getFormularioEspecifico().getListCelulares());
        gestorLista.clearList(this.getFormularioEspecifico().getListTelefonos());
        

    }

    public void setGestor(GestorProfesionales gestor) {
        this.gestor = gestor;
    }
    
    public FrmProfesional getFormularioEspecifico() {
        return (FrmProfesional) this.getFrame();
    }
        
   public void obtenerUbicacionProfesional() {       
       GestorDomicilio gestorDom = new GestorDomicilio();       
       gestorDom.crearModelo();
       gestorDom.getModel().setPiso(this.getFormularioEspecifico().getTxtPiso().getText());
       gestorDom.getModel().setDireccion(this.getFormularioEspecifico().getTxtCalle().getText());
       gestorDom.getModel().setNumDepto(this.getFormularioEspecifico().getTxtNumDpto().getText());
       gestorDom.getModel().setNumero(this.getFormularioEspecifico().getTxtNroCalle().getText());
       gestorDom.getModel().setLocalidad(this.seleccionComboLoc());       
       this.getModel().setDomicilio(gestorDom.getModel());   
   }
   
    public void llenarListTel(List lista) {
        GestorLista gestorLista = new GestorLista();
        gestorLista.llenarList(lista, this.getFormularioEspecifico().getListTelefonos());
    }
       
    public void listarTelefono(GestorTelefono gestorTel) {
        List telefonos = gestorTel.listarTelefonos();
        this.llenarListTel(telefonos);
        
    }
   
   
   public void tomarNumTelefono() {
       if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtCaracTel()) || (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtNumTel()))) {
            
             new Util().getMensajeError("No ingresó ningún teléfono válido.");
        
        } else {
             GestorTelefono gestorTel = new GestorTelefono();
             gestorTel.crearModelo();
             
             String caracTel = this.getFormularioEspecifico().getTxtCaracTel().getText();
             String numTel = this.getFormularioEspecifico().getTxtNumTel().getText();
             
             gestorTel.getModel().setCaracteristica(caracTel);
             gestorTel.getModel().setNumero(numTel);

             
             this.listaTelefonos.add(gestorTel.getModel());

             this.llenarListTel(this.listaTelefonos);
             
             
             this.getFormularioEspecifico().getTxtCaracTel().setText("");
             this.getFormularioEspecifico().getTxtNumTel().setText("");
             this.getFormularioEspecifico().getTxtCaracTel().requestFocus();
//             this.clearList();
        
//           this.getFormularioEspecifico().getListTelefonos()
 //          this.listaTelefonos.add();
        
        
        }
   
   }
   
   
   public void obtenerTelefonosProfesional() {
       GestorTelefono gestorTel = new GestorTelefono();
       gestorTel.crearModelo();
       
       gestorTel.getModel().setCaracteristica(this.getFormularioEspecifico().getTxtCaracTel().getText());
       gestorTel.getModel().setNumero(this.getFormularioEspecifico().getTxtNumTel().getText());
              
       this.getModel().getTelefonos().add(gestorTel.getModel());
       
       
       
       GestorCelular gestorCel = new GestorCelular();
       gestorCel.crearModelo();
       
       gestorCel.getModel().setCaracteristica(this.getFormularioEspecifico().getTxtCaracCel().getText());
       gestorCel.getModel().setNumero(this.getFormularioEspecifico().getTxtCelNum().getText());
       
//       this.getModel().getCelulares().add(gestorCel.getModel());

   
   }
   
   
   public void obtenerDatosProfesional() {
       
       
                this.getModel().setNombre(getFormularioEspecifico().getTxtNombrePers().getText().trim().toLowerCase());
                this.getModel().setApellido(getFormularioEspecifico().getTxtApellidoPers().getText().trim().toLowerCase());
               
                GestorDocumento gestorDoc = new GestorDocumento();;
    
                gestorDoc.crearModelo();
                gestorDoc.getModel().setNum(this.getFormularioEspecifico().getTxtNumDocumentoPers().getText().trim());
                gestorDoc.getModel().setTipoDocumento(this.seleccionComboTipoDoc());

                
                this.getModel().setDocumento(gestorDoc.getModel());
               
                this.getModel().setFechaNac(getFormularioEspecifico().getDateFechaNacPers().getDate());
                
                this.getModel().setMatricula(getFormularioEspecifico().getTxtMatricula().getText().trim());
   
   }
   public void guardar() {
        if (this.comprobarCamposMinimos()) {
            if (this.isNuevo()) {
                
                this.crearGestor();
                this.getGestor().crearModelo();
                this.obtenerDatosProfesional();
                this.obtenerUbicacionProfesional();
                this.obtenerTelefonosProfesional();
                
                
                if (!this.getGestor().isRepetido( this.getModel().getDocumento())) {
                    if (!this.getGestor().isRepetido(this.getModel().getMatricula())) {
                    
                        this.getGestor().procesar(this.getModo());
                        
                        this.getFormularioEspecifico().ConfigInicial();
                    } else {
                        new  Util().getMensajeError("El Profesional Ingresado ya existe en la base de datos.\nLa matrícula '"+this.getFormularioEspecifico().getTxtMatricula().getText()+"' ya fue ingresada.");
                        this.getFormularioEspecifico().getTxtMatricula().setBackground(Color.red);
                        this.getFormularioEspecifico().getTxtMatricula().setText("");
                    }
                } else {
                    new  Util().getMensajeError("El Profesional Ingresado ya existe en la base de datos.\nEl Nro de Documento '"+this.getFormularioEspecifico().getTxtNumDocumentoPers().getText()+"' ya fue ingresado.");
                    this.getFormularioEspecifico().getTxtNumDocumentoPers().setBackground(Color.red);
                    this.getFormularioEspecifico().getTxtNumDocumentoPers().setText("");
                }
                 
            } else {
                  this.obtenerDatosProfesional();
                  this.obtenerUbicacionProfesional();
                  this.obtenerTelefonosProfesional();

                    if (!this.getGestor().isRepetido( this.getModel().getDocumento())) {
                        if (!this.getGestor().isRepetido(this.getModel().getMatricula())) {
                            
                            this.getGestor().procesar(this.getModo());
                             this.getFormularioEspecifico().ConfigInicial();
                             this.clearList();
                             
                        } else {
                             new  Util().getMensajeError("El Profesional Ingresado ya existe en la base de datos.\nLa matrícula '"+this.getFormularioEspecifico().getTxtMatricula().getText()+"' ya fue ingresada.");
                             this.getFormularioEspecifico().getTxtMatricula().setBackground(Color.red);
                             this.getFormularioEspecifico().getTxtMatricula().setText("");
                    
                        }
                    } else {
                            new  Util().getMensajeError("El Profesional Ingresado ya existe en la base de datos.\nEl Nro de Documento '"+this.getFormularioEspecifico().getTxtNumDocumentoPers().getText()+"' ya fue ingresado.");
                            this.getFormularioEspecifico().getTxtNumDocumentoPers().setBackground(Color.red);
                            this.getFormularioEspecifico().getTxtNumDocumentoPers().setText("");
                    }
        
            } 
            

        } else {
            new  Util().getMensajeError("Hay campos obligatorios vacíos");        
        }
    } 
   
    public boolean comprobarCamposMinimos() {
        int numero=0;
        if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtApellidoPers())) {
            numero=1;
            this.getFormularioEspecifico().getTxtApellidoPers().setBackground(Color.pink); 
        } else {this.getFormularioEspecifico().getTxtApellidoPers().setBackground(Color.GREEN);}
        
        if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtCalle())) {
            numero=1;
            this.getFormularioEspecifico().getTxtCalle().setBackground(Color.pink); 
        } else {this.getFormularioEspecifico().getTxtCalle().setBackground(Color.GREEN);}
        
        if (this.getFormularioEspecifico().getCmbLocalidades().getSelectedItem()==""){
            numero=1;
            this.getFormularioEspecifico().getCmbLocalidades().setBackground(Color.pink); 
        } else {this.getFormularioEspecifico().getCmbLocalidades().setBackground(Color.GREEN);}
        
        if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtMatricula())) {
            numero=1;
            this.getFormularioEspecifico().getTxtMatricula().setBackground(Color.pink); 
        } else {this.getFormularioEspecifico().getTxtMatricula().setBackground(Color.GREEN);}
        
        if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtNombrePers())) {
            numero=1;
            this.getFormularioEspecifico().getTxtNombrePers().setBackground(Color.pink); 
        }     else {this.getFormularioEspecifico().getTxtNombrePers().setBackground(Color.GREEN);}   
        
        if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtNumDocumentoPers())) {
            numero=1;
            this.getFormularioEspecifico().getTxtNumDocumentoPers().setBackground(Color.pink); 
        } else {this.getFormularioEspecifico().getTxtNumDocumentoPers().setBackground(Color.GREEN);}
        
        if (this.getFormularioEspecifico().getCmb_profesionDatos().getSelectedItem()==null) {
            numero=1;
            this.getFormularioEspecifico().getCmb_profesionDatos().setBackground(Color.pink); 
        } else {this.getFormularioEspecifico().getCmb_profesionDatos().setBackground(Color.GREEN);}
        
        if (getFormularioEspecifico().getCmbProvincias().getSelectedItem()==null) {
//            numero=1;
            this.getFormularioEspecifico().getCmbProvincias().setBackground(Color.pink); 
        } else {this.getFormularioEspecifico().getCmbProvincias().setBackground(Color.GREEN);}
        
        if (getFormularioEspecifico().getCmbPaises().getSelectedItem()==null) {
            numero=1;
            this.getFormularioEspecifico().getCmbPaises().setBackground(Color.pink); 
        } else {this.getFormularioEspecifico().getCmbPaises().setBackground(Color.GREEN);}
        
        if (getFormularioEspecifico().getDateFechaNacPers().getDate()==null) {
            numero=1;
            new  Util().getMensajeError("La fecha de nacimiento ingresada es nula o no válida.");
            getFormularioEspecifico().getDateFechaNacPers().setBackground(Color.pink);
        } else {this.getFormularioEspecifico().getDateFechaNacPers().setBackground(Color.green);}
        
        if (getFormularioEspecifico().getCmbDocumento().getSelectedItem()=="") {
            numero=1;
            getFormularioEspecifico().getCmbDocumento().setBackground(Color.pink);
        } else { getFormularioEspecifico().getCmbDocumento().setBackground(Color.GREEN);}
        
        
        if (numero==1) {
            
            return false;
        } else {
            return true;
        }
        

    }
//    public void setGestor(GestorProfesionales gestor) {
//        this.gestor = gestor;
//    }
    
     public void cargarComboProvBuscar() {
        GestorCombo gestorCombo = new GestorCombo();
        gestorCombo.cargarCombo(this.listProvXPaisBuscar(), this.getFormularioEspecifico().getCmbProvincias());
        
    }
     
    public void cargarComboLocalidadBuscar() {
        GestorCombo gestorCombo = new GestorCombo();
        gestorCombo.cargarCombo(this.listLocalidadXProvBuscar(), this.getFormularioEspecifico().getCmbLocalidades());
        
    }
    public void cargarComboTipoDoc(){
        GestorCombo gestorCombo = new GestorCombo();
        gestorCombo.cargarCombo(this.listTipoDoc(), this.getFormularioEspecifico().getCmbDocumento());
    }
    
    public List listTipoDoc(){
        GestorConsultas gestor = new GestorConsultas(TipoDocumento.class);
        return gestor.resultConsulta();
    }
     
     public List listProvXPaisBuscar() {
        List provincias = new ArrayList();
        if (this.seleccionComboPaisBuscar() == null) {
            return provincias;
        } else {
            Iterator iter = this.seleccionComboPaisBuscar().getProvincias().iterator();
            while (iter.hasNext()) {
                provincias.add((Provincia) iter.next());
            }
            return provincias;
        }
    }
     
     public List listLocalidadXProvBuscar() {
        List Localidades = new ArrayList();
        if (this.seleccionComboProvinciaBuscar() == null) {
            return Localidades;
        } else {
            Iterator iter = this.seleccionComboProvinciaBuscar().getCiudades().iterator();
            while (iter.hasNext()) {
                Localidades.add((Localidad) iter.next());
            }
            return Localidades;
        }
    }
     
    public Pais seleccionComboPaisBuscar() {
        return (Pais) this.getFormularioEspecifico().getCmbPaises().getSelectedItem();
    }
    public Provincia seleccionComboProvinciaBuscar() {
        return (Provincia) this.getFormularioEspecifico().getCmbProvincias().getSelectedItem();
    }
    public TipoDocumento seleccionComboTipoDoc(){
       return (TipoDocumento)this.getFormularioEspecifico().getCmbDocumento().getSelectedItem();
    }
    public Localidad seleccionComboLoc(){
        return (Localidad) this.getFormularioEspecifico().getCmbLocalidades().getSelectedItem();
    }


   
}
