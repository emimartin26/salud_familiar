/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas.Paciente;

import Model.Paciente.Enfermedad;
import Model.Paciente.GestorEnfermedad;
import Model.Paciente.GestorSintoma;
import Model.Paciente.Sintoma;
import Utilidades.GestorCombo;
import Utilidades.GestorLista;
import Utilidades.Util;
import Vistas.GestorVista;
import Vistas.InterfazFrm;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import javax.swing.JDesktopPane;

/**
 *
 * @author Emiliano
 */
public class GestorVistaSintomas extends GestorVista implements InterfazFrm {

    private GestorSintoma gestor;

    public GestorVistaSintomas(JDesktopPane escritorio) {
        this.setEscritorio(escritorio);
        this.setFrame(new FrmSintomas(this));
        this.setGestor(new GestorSintoma());

    }

    public GestorSintoma getGestor() {
        return gestor;
    }

    public void setGestor(GestorSintoma gestor) {
        this.gestor = gestor;
    }

    private Sintoma getModel() {
        return this.gestor.getModel();
    }

    public String getNombreABuscar() {
        return this.getFormularioEspecifico().getTxtNombreSintoma().getText();
    }

    private Sintoma getSeleccionLista() {
        return (Sintoma) this.getFormularioEspecifico().getLista().getSelectedValue();
    }

    public List listaSintomaConb() {
        return this.getGestor().filtrarConb(this.seleccionComboBuscar(), this.tomarNombreSintoma().trim().toLowerCase());

    }

    public List listaSintomaNombre() {
        return this.getGestor().filtrarNombre(this.tomarNombreSintoma().trim().toLowerCase());
    }

    @Override
    public void abrir() {
        this.getEscritorio().add(this.getFrame());
        this.getFrame().setVisible(true);
    }

    public void guardar() {
        if (this.comprabarCamposMinimos()) {
            if (this.isNuevo()) {
                this.getGestor().crearModelo();
                this.getModel().setNombre(getFormularioEspecifico().getTxtNombreNuevoSintoma().getText().trim().toLowerCase());
                if (!this.getGestor().isRepetido(this.getModel().getNombre())) {
                    this.getGestor().guardar(this.getModo());
                    this.getFormularioEspecifico().configInicial();
                } else {
                   new  Util().getMensajeError("El Sintoma ingresado ya existe en la base de datos");
                }
            } else {
                this.getGestor().getModel().setNombre(this.getFormularioEspecifico().getTxtNombreNuevoSintoma().getText().trim().toLowerCase());
                this.getGestor().getModel().setDescripcion(this.getFormularioEspecifico().getTxtDescripcion().getText().trim().toLowerCase());
                this.getGestor().guardar(this.getModo());
                this.getFormularioEspecifico().configInicial();
                this.clearList();
            }
        }
    }

    public void modificarSintoma() {
        if (this.getFormularioEspecifico().getLista().getSelectedValue() == null) {
           new  Util().getMensajeError("No ha seleccionado nada");
        } else {
            this.getFormularioEspecifico().getBtnGuardar().setEnabled(true);
            String nombre = this.getFormularioEspecifico().getLista().getSelectedValue().toString();
            //String descripcion = this.getFormularioEspecifico().getLista().getSelectedValue().toString();
            this.getFormularioEspecifico().getTxtNombreNuevoSintoma().setEnabled(true);
            this.getFormularioEspecifico().getTxtNombreNuevoSintoma().setText(nombre);
            this.getFormularioEspecifico().getTxtDescripcion().setEnabled(true);
            this.getFormularioEspecifico().getTxtDescripcion().setText(this.getSeleccionLista().getDescripcion());
            this.getGestor().setModel(this.getSeleccionLista());
        }
    }
    public void imprimir(){
        this.getGestor().imprimir();
    }

    public void listar() {
        List Sintoma = this.getGestor().listarSintoma();
        this.llenarList(Sintoma);
        this.getFormularioEspecifico().setConfigBtnFiltrar(true);
    }

    public void filtrar() {

        if (!this.getFormularioEspecifico().getChekNombre().isSelected() && this.getFormularioEspecifico().getChekEnfermedad().isSelected()) {
            this.llenarList(this.listaSintomaXEnfermedad());
        }

        if (this.getFormularioEspecifico().getChekNombre().isSelected() && this.getFormularioEspecifico().getChekEnfermedad().isSelected()) {
            this.llenarList(this.listaSintomaConb());
        }
        if (this.campoBusquedaVacia()) {
            if (this.getFormularioEspecifico().getChekNombre().isSelected() && !this.getFormularioEspecifico().getChekEnfermedad().isSelected()) {
                this.llenarList(this.listaSintomaNombre());
            }
        }
    }
//    }

    public List listaSintomaXEnfermedad() {
        Iterator iter = this.seleccionComboBuscar().getSintoma().iterator();
        List sintomas = new ArrayList();
        while (iter.hasNext()) {
            Sintoma sintoma = (Sintoma) iter.next();
            sintomas.add(sintoma);
        }
        return sintomas;
    }

    public Enfermedad seleccionComboBuscar() {
        return (Enfermedad) this.getFormularioEspecifico().getCmbEnfermedad().getSelectedItem();
    }

    public List listEnfermedad() {
        GestorEnfermedad gestor = new GestorEnfermedad();
        return gestor.listarEnfermedades();
    }

    public void llenarList(List lista) {
        GestorLista gestorLista = new GestorLista();
        gestorLista.llenarList(lista, this.getFormularioEspecifico().getLista());

    }

    public void cargarComboEnfermedad() {
        GestorCombo gestorCombo = new GestorCombo();
        gestorCombo.cargarCombo(this.listEnfermedad(), this.getFormularioEspecifico().getCmbEnfermedad());
    }

    public FrmSintomas getFormularioEspecifico() {
        return (FrmSintomas) this.getFrame();
    }

    public void configCheckNombre() {
        if (this.getFormularioEspecifico().getChekNombre().isSelected()) {
            this.getFormularioEspecifico().getTxtNombreSintoma().setEnabled(true);
            this.getFormularioEspecifico().getTxtNombreSintoma().setText("");
            this.getFormularioEspecifico().getTxtNombreSintoma().requestFocus();
        } else {
            this.getFormularioEspecifico().getTxtNombreSintoma().setEnabled(false);
            this.getFormularioEspecifico().getTxtNombreSintoma().setText("");
        }

    }

    public boolean campoBusquedaVacia() {
        if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtNombreSintoma())) {
            return false;
        }
        return true;
    }

    public String tomarNombreSintoma() {
        return this.getFormularioEspecifico().getTxtNombreSintoma().getText();
    }

    public void configCheckEnfermedad() {
        if (this.getFormularioEspecifico().getChekEnfermedad().isSelected()) {
            this.getFormularioEspecifico().getCmbEnfermedad().setEnabled(true);
            this.getFormularioEspecifico().getBtnAux().setEnabled(true);
            this.cargarComboEnfermedad();
        } else {
            this.getFormularioEspecifico().getBtnAux().setEnabled(false);
            this.getFormularioEspecifico().getCmbEnfermedad().setEnabled(false);
            this.getFormularioEspecifico().getCmbEnfermedad().removeAllItems();
        }
    }

    public void eliminarSintoma() {
        if (this.getFormularioEspecifico().getLista().getSelectedValue() == null) {
            new  Util().getMensajeError("No ha seleccionado nada");
        } else {
            String nombre = this.getFormularioEspecifico().getLista().getSelectedValue().toString();
            switch (new  Util().confirmacion("Â¿Desea eliminar el Sintoma " + nombre + "?")) {
                case 0://aceptar

                    this.getGestor().setModel(this.getSeleccionLista());
                    this.getGestor().eliminar();
                    this.getFormularioEspecifico().configInicial();
                    new  Util().getMensajeInformation("Sintoma eliminado con exito");
                    this.clearList();
                    break;
                case 2://cancelar

                    break;
            }
        }
    }

    public String getNombre() {
        return this.getFormularioEspecifico().getTxtNombreNuevoSintoma().getText();
    }

    public String getDescripcion() {
        return this.getFormularioEspecifico().getTxtDescripcion().getText();
    }

    @Override
    public void cerrar() {
        this.getFormularioEspecifico().setVisible(false);
    }

    public void clearList() {
        GestorLista gestorLista = new GestorLista();
        gestorLista.clearList(this.getFormularioEspecifico().getLista());

    }

    public boolean comprabarCamposMinimos() {
        if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtNombreNuevoSintoma())) {
            new  Util().getMensajeError("Campo nombre esta vacio");
            return false;
        }
        return true;

    }
}
