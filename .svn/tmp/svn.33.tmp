/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package Vistas.Paciente;

import Model.Paciente.Enfermedad;
import Model.Paciente.GestorEnfermedad;
import Model.Paciente.GestorTipoEnfermedad;
import Model.Paciente.TipoEnfermedad;
import Utilidades.GestorCombo;
import Utilidades.GestorLista;
import Utilidades.Util;
import Vistas.GestorVista;
import Vistas.InterfazFrm;
import java.util.List;
import javax.swing.JDesktopPane;

/**
 *
 * @author Lopez
 */
public class GestorVistaEnfermedad extends GestorVista implements InterfazFrm{
    
    
    private GestorEnfermedad gestorVista;

    public GestorVistaEnfermedad(JDesktopPane escritorio) {
        this.setEscritorio(escritorio);
        this.setFrame(new FrmEnfermedad(this));
        this.setGestor(new GestorEnfermedad());
    }

    private Enfermedad getModel() {
        return this.gestorVista.getModel();
    }

    private void crearGestor() {
        this.setGestor(new GestorEnfermedad());
    }

    public GestorEnfermedad getGestor() {
        return gestorVista;
    }

    public void setGestor(GestorEnfermedad gestor) {
        this.gestorVista = gestor;
    }
  
    
    @Override
    public void abrir() {
        this.getEscritorio().add(this.getFrame());
        this.getFrame().setVisible(true);
    }
    
    public FrmEnfermedad getFormularioEspecifico() {
        return (FrmEnfermedad) this.getFrame();
    }

    @Override
    public void cerrar() {
        throw new UnsupportedOperationException("Not supported yet.");
    }
    
     public void guardar() {
        if (this.comprabarCamposMinimos()) {
            if (this.isNuevo()) {
                this.getGestor().crearModelo();
                this.getModel().setNombre(getFormularioEspecifico().getTxtNombreNuevaEnfermedad().getText().trim().toLowerCase());
                this.getModel().setTipoEnfermedad(this.seleccionComboNuevo());
                if (!this.getGestor().isRepetido(this.getModel().getNombre())) {
                    this.getGestor().guardar(this.getModo());
                    this.getFormularioEspecifico().configInicial();
                } else {
                    Util.getMensajeError("La enfermedad ingresado ya existe en la base de datos");
                }
            } else {
                this.getGestor().getModel().setNombre(this.getFormularioEspecifico().getTxtNombreNuevaEnfermedad().getText().trim().toLowerCase());
                this.getGestor().guardar(this.getModo());
                this.getFormularioEspecifico().configInicial();
                this.clearList();
            }

        }
 
    }
     
    public void eliminarEnfermedad() {
        if (this.getFormularioEspecifico().getListaEnfermedades().getSelectedValue() == null) {
            Util.getMensajeError("No ha seleccionado nada");
        } else {
            String nombre = this.getFormularioEspecifico().getListaEnfermedades().getSelectedValue().toString();
            switch (Util.confirmacion("Â¿Desea eliminar la provincia " + nombre + "?")) {
                case 0://aceptar

                    this.getGestor().setModel(this.tomarSeleccionLista());
                    this.getGestor().eliminar();
                    this.getFormularioEspecifico().configInicial();
                    Util.getMensajeInformation("Provincia eliminada con exito");
                    this.clearList();
                    break;
                case 2://cancelar

                    break;
            }
        }
    }
    public void imprimir(){
        this.getGestor().imprimir();
    }
    
    private Enfermedad tomarSeleccionLista() {
        return (Enfermedad) this.getFormularioEspecifico().getListaEnfermedades().getSelectedValue();
    }
     
    public TipoEnfermedad seleccionComboNuevo() {
        return (TipoEnfermedad) this.getFormularioEspecifico().getCmbTipoEnfermedadNuevaEnfermedad().getSelectedItem();
    }
     
    public boolean comprabarCamposMinimos() {
        if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtNombreNuevaEnfermedad()) && Util.estaSeleccionadoCombo(this.getFormularioEspecifico().getCmbTipoEnfermedad())) {
            Util.getMensajeError("Campo nombre esta vacio o no se ha seleccionado tipo de enfermedad");
            return false;
        }
        return true;

    }
    
    public void clearList() {
        GestorLista gestorLista = new GestorLista();
        gestorLista.clearList(this.getFormularioEspecifico().getListaEnfermedades());

    }
    
    public void llenarList(List lista) {
        GestorLista gestorLista = new GestorLista();
        gestorLista.llenarList(lista, this.getFormularioEspecifico().getListaEnfermedades());
    }
        
    public void sinFiltro() {
        this.llenarList(this.listaCompletaEnfermedad());
    }
    
    public List listaCompletaEnfermedad() {
        return this.getGestor().listarEnfermedades();
    }
    
    public void abrirFrmTipoEnfermedades() {
        GestorVistaTipoEnfermedades auxGestor = new GestorVistaTipoEnfermedades(this.getEscritorio());
        auxGestor.abrir();
    }
    
    public void configChekNombre() {
        if (this.getFormularioEspecifico().getChekNombre().isSelected()) {
            this.getFormularioEspecifico().getTxtNombre().setEnabled(true);
            this.getFormularioEspecifico().getTxtNombre().setText("");
            this.getFormularioEspecifico().getTxtNombre().requestFocus();
        } else {
            this.getFormularioEspecifico().getTxtNombre().setEnabled(false);
            this.getFormularioEspecifico().getTxtNombre().setText("");
        }

    }
    
    public void configChekTipoEnfermedad() {
        if (this.getFormularioEspecifico().getChekTipoEnfermedad().isSelected()) {
            this.getFormularioEspecifico().getCmbTipoEnfermedad().setEnabled(true);
            this.getFormularioEspecifico().getBtnAux().setEnabled(true);
//            this.cargarComboTipoEnfermedad();
        } else {
            this.getFormularioEspecifico().getBtnAux().setEnabled(false);
            this.getFormularioEspecifico().getCmbTipoEnfermedad().setEnabled(false);
            this.getFormularioEspecifico().getCmbTipoEnfermedad().removeAllItems();
        }
    }
    
    public void filtrar() {
        if (!this.getFormularioEspecifico().getChekNombre().isSelected() && this.getFormularioEspecifico().getChekTipoEnfermedad().isSelected()) {
            this.llenarList(this.listaEnfermedadTipoEnfermedad());
        }

        if (this.getFormularioEspecifico().getChekNombre().isSelected() && this.getFormularioEspecifico().getChekTipoEnfermedad().isSelected()) {
            this.llenarList(this.listaEnfermedadConb());
        }
        if (this.campoBusquedaVacia()) {
            if (this.getFormularioEspecifico().getChekNombre().isSelected() && !this.getFormularioEspecifico().getChekTipoEnfermedad().isSelected()) {
                this.llenarList(this.listaEnfermedadNombre());
            }
        }
    }
        
    public List listaEnfermedadConb() {
        return this.getGestor().filtrarConb(this.seleccionComboBuscar(), this.tomarNombre().trim().toLowerCase());

    }
    
    public List listaEnfermedadTipoEnfermedad() {
        return this.getGestor().filtrarTipoEnfermedad(this.seleccionComboBuscar());
    }
    
    public String tomarNombre() {
        return this.getFormularioEspecifico().getTxtNombre().getText();
    }
    
    public TipoEnfermedad seleccionComboBuscar() {
        return (TipoEnfermedad) this.getFormularioEspecifico().getCmbTipoEnfermedad().getSelectedItem();
    }
    
    public boolean campoBusquedaVacia() {
        if (Util.estaVacioTxt(this.getFormularioEspecifico().getTxtNombre())) {
            return false;
        }
        return true;
    }
    
    public List listaEnfermedadNombre() {
        return this.getGestor().filtrarNombre(this.tomarNombre().trim().toLowerCase());
    }
    
    public void cargarComboTipoEnfermedad() {
        GestorCombo gestorCombo = new GestorCombo();
        gestorCombo.cargarCombo(this.listaCompletaTipoEnfermedad(), this.getFormularioEspecifico().getCmbTipoEnfermedad());
    }
    
    public void cargarComboTipoEnfermedadNuevaEnfermedad() {
        GestorCombo gestorCombo = new GestorCombo();
        gestorCombo.cargarCombo(this.listaCompletaTipoEnfermedad(), this.getFormularioEspecifico().getCmbTipoEnfermedadNuevaEnfermedad());
    }
    
    public List listaCompletaTipoEnfermedad() {
        GestorTipoEnfermedad gestorTipoEnfermedad = new GestorTipoEnfermedad();
        return gestorTipoEnfermedad.listarTipoEnfermedades();
    }
    
    public void modificarEnfermedad() {
        if (this.getFormularioEspecifico().getListaEnfermedades().getSelectedValue() == null) {
            Util.getMensajeError("No ha seleccionado nada");
        } else {
            String nombre = this.getFormularioEspecifico().getListaEnfermedades().getSelectedValue().toString();
            this.getFormularioEspecifico().getTxtNombre().setText(nombre);
            this.getGestor().setModel(this.tomarSeleccionLista());
        }

    }

    
}
